{"version":3,"sources":["components/Stat.js","components/Todo.js","components/NewTodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Stat","_this$props","this","props","done","total","react_default","a","createElement","Component","Todo","style","type","onChange","onDoneChange","checked","todo","readOnly","name","NewTodoForm","state","newTodoName","setState","_this2","onNewTodo","event","onInputChange","target","value","onClick","App","todos","forEach","todoIndex","updatedTodos","notFinishedTodo","filter","deleteTodo","newTodo","fetch","method","headers","Content-Type","body","JSON","stringify","id","postTodo","loadTodo","updateTodo","then","res","json","_this3","countDone","length","todoStyle","textDecoration","color","className","Stat_Stat","clearDone","map","index","Todo_Todo","handleDoneChange","key","NewTodoForm_NewTodoForm","addNewTodo","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78bfda6d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Stat extends Component {\n    render() {\n        const {done, total} = this.props;\n        return (\n            <strong>\n                <span> ({done}) </span> / <span> ({total}) </span>\n            </strong>\n        );\n    }\n}\n","import React, {Component} from 'react';\n\nexport default class Todo extends Component {\n    render() {\n        const {style} = this.props;\n        return (\n            <p style={style}>\n                <input type='checkbox'\n                       onChange={this.props.onDoneChange}\n                       checked={this.props.todo.done}\n                       readOnly={true}\n                />\n                <span>{this.props.todo.name}</span>\n            </p>\n        );\n    }\n}\n","import React, {Component} from 'react';\n\nexport default class NewTodoForm extends Component {\n    // This is state of NewTodoForm\n    state = {\n        newTodoName: ''\n    };\n\n    onInputChange(newTodoName) {\n        this.setState({\n            newTodoName: newTodoName\n        });\n    }\n\n    render() {\n        const {onNewTodo} = this.props;\n        return (\n            <div>\n                <input type=\"text\" onChange={(event) => {\n                    this.onInputChange(event.target.value)\n                }} value={this.state.newTodoName}/> {/* Value of input box */}\n                <button type=\"submit\" onClick={() => {\n                    onNewTodo({name: this.state.newTodoName, done: false})\n                }}>Create\n                </button>\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Stat from './components/Stat';\nimport Todo from './components/Todo';\nimport NewTodoForm from './components/NewTodoForm';\n\nexport default class App extends Component {\n    state = {\n        todos: []\n    };\n\n    countDone() {\n        let done = 0;\n        this.state.todos.forEach(todo => {\n            if (todo.done) {\n                done++;\n            }\n        });\n        return done;\n    }\n\n    handleDoneChange(todoIndex) {\n        let updatedTodos = this.state.todos;\n        updatedTodos[todoIndex].done = !updatedTodos[todoIndex].done;\n\n        this.setState({\n            todos: updatedTodos\n        })\n    }\n\n    clearDone() {\n        const notFinishedTodo = this.state.todos.filter((todo) => !todo.done);\n        this.deleteTodo();\n        this.setState({\n            todos: notFinishedTodo\n        })\n    }\n\n    async postTodo(newTodo) {\n        await fetch('http://todos.sphinx-demo.com/todos', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newTodo)\n        })\n    }\n\n    async updateTodo() {\n        await this.state.todos.forEach(todo => {\n            if(todo.done) {\n                fetch('http://todos.sphinx-demo.com/todos/' + todo.id, {\n                    method: 'PUT',\n                    body: JSON.stringify({ done: todo.done })\n                });\n            }\n        })\n    }\n\n    async addNewTodo(newTodo) {\n        await this.postTodo(newTodo);\n        await this.loadTodo();\n        await this.updateTodo();\n    }\n\n    async loadTodo() {\n        await fetch('http://todos.sphinx-demo.com/todos')\n            .then(res => res.json())\n            .then(todo => this.setState({todos: todo}));\n    }\n\n    async componentDidMount() {\n        await this.loadTodo();\n    }\n\n    async deleteTodo() {\n        await this.state.todos.forEach(todo => {\n            if(todo.done) {\n                fetch('http://todos.sphinx-demo.com/todos/' + todo.id, {\n                    method: 'DELETE'\n                })\n            }\n        })\n    }\n\n    render() {\n        const done      = this.countDone();\n        const total     = this.state.todos.length;\n        const todoStyle = {\n            textDecoration: 'line-through',\n            color: 'green',\n        };\n\n        return (\n            <div>\n                <div className={'todo-header'}>\n                    <Stat done={done} total={total}/>\n                    <button onClick={() => this.clearDone()}>Clear</button>\n                </div>\n                <hr/>\n                <div className={'todo-list'}>\n                    {\n                        this.state.todos.map((todo, index) => {\n                            if (todo.done) {\n                                return (<Todo onDoneChange={() => {\n                                    this.handleDoneChange(index)\n                                }} key={index} todo={todo} style={todoStyle}/>);\n                            }\n                            return (<Todo onDoneChange={() => {\n                                this.handleDoneChange(index)\n                            }} key={index} todo={todo}/>);\n                        })\n                    }\n                </div>\n                <hr/>\n                <div className={'new-todo'}>\n                    <NewTodoForm onNewTodo={(newTodo) => {\n                        this.addNewTodo(newTodo)\n                    }}/>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}